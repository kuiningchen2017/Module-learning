什么是模块化？为什么要模块化？
首先我们要知道ECMAScript标准的缺陷：
1，没有模块化系统
  向我们在页面中引入jQuery jQuery-UI 这两个库，其实就是两个模块，但严格意义上说只能是比较落后的两个模块，
因为在引入他们的时候我们要考虑引入的先后顺序，先引入jQuery再引入jQuery-UI。
2，标准库较少
  什么是标准库?就是有厂商和官方提供的一些可以实现各种各样功能的库，比如：读文件就给我们一个IO库、想生成
图形化界面就给我们一个UI库，想干什么功能就对应的提供什么样的库，但ECMAScript标准并没有提供这些，想要什么
功能就需要自己去百度搜索。
3，没有标准接口
  没有标准库自然就没有标准接口
4，缺乏管理系统
  没有标准库自然也就没有所谓的管理系统

  所以基于ECMAScript的缺陷，再加上程序设计规模达到了一定程度，则必须对其进行模块化。
如果没有模块化将导致：
1，请求过多
2，依赖模糊
3，难以维护
模块化的好处：
1，降低代码的复杂度，更好的分离，按需加载
2，降低耦合度（各模块之间无关联）
3，复用性、容易部署、
4，可维护性高

    CommonJS的模块化规范：

首先CommonJS对模块化的定义十分简单：
模块引用、
模块定义、
模块标识。

模块引用：
    假定有一个数学模块Math.js 在CommonJS中，有一个全局方法require();用于加载模块：
    const Math = require('math');
    然后就可以调用模块提供的方法
    Math.add(1,2);  // 3
模块定义：
    就像官方定义的模块一样，我们自己也可以定义模块。
    1，首先我们要创建一个js文件（在NodeJS里一个js文件就是一个模块）
    2，向文件中添加函数（每一个文件都是一个闭包，每一个文件都是独立运行在函数内部的）
    （所以我们在js文件中编写的内容，无法在其他模块中访问）
    3，将函数向外暴露，使其他模块可见（exports.xxx = xxx 将需要暴露的对象或方法设置为export的属性）
    （或者 module.exports = xxx）
